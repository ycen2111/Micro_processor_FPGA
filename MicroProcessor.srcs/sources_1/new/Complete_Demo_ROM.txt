 
/*
ROM file. This file is a read-only document. 
the ROM is in memory [7:0] ROM [255:0]
Been read by file "MicroProcessor/MicroProcessor.srcs/sources_1/new/ROM.v"
*/
 
 /* Address
  Peripheral     Base Address    High Address
 ----------------------------------------------
 Data Memory        0x00            0x7F
 IR Transmitter     0x90            0x90
 Mouse              0xA0            0xA2
 VGA                0xB0            0xB2
 LEDs               0xC0            0xC0
 SevenSeg           0xD0            0xD1
 Timer              0xF0            0xF3
 */
 
 /* ALU
 ALU Code   Operation
 --------------------------
 4'h0       add
 4'h1       sub
 4'h2       multi
 4'h3       A shift left
 4'h4       A shift right
 4'h5       A add 1
 4'h6       B add 1
 4'h7       A sub 1
 4'h8       B sub 1
 4'h9       if A = B
 4'hA       if A > B
 4'hB       if A < B
 */
 
 /*
 Instruction            First Byte          Second Byte 
 --------------------------------------------------------
 A <- [Mem_ADD]         X0                  Mem_ADD
 B <- [Mem_ADD]         X1                  Mem_ADD
 [Mem_ADD] <- A         X2                  Mem_ADD
 [Mem_ADD] <- B         X3                  Mem_ADD
 A <- ALU_OP(A,B)       {ALU_code,4}     /
 B <- ALU_OP(A,B)       {ALU_code,5}     /
 BREQ ADDR (A=B)        96                  Mem_ADD
 BGTQ ADDR (A>B)        A6                  Mem_ADD
 BLTQ ADDR (A<B)        B6                  Mem_ADD
 GOTO ADDR              X7                  Mem_ADD
 GOTO_IDLE              X8                  /
 FUNCTION_CALL ADDR     X9                  Mem_ADD
 RETURN                 XA                  /
 A <- [A]               XB                  /
 B <- [B]               XC                  /
 A <- Immediate value   XD                  Immediate Value
 B <- Immediate value   XE                  Immediate Value
 */

 /*
 Peripheral             Address             Description
 ---------------------------------------------------------
 IR                     90                  send command[3:0]                
 Mouse                  A0                  Read X axis
                        A1                  Read Y axis
                        A2                  set whether interrupt enable [0] and sensitivity [2:1]
 VGA                    B0                  
 LEDs                   C0                  set LED on/off state
 7 segments             D0                  read bus data to X (left two numbers)
                        D1                  read bus data to Y (right two numbers)
 Timer                  F0                  read current timer value (timer[7:0])
                        F1                  set interrupt ratio (send 100 as 100ms)
                        F2                  reset timer to 0
                        F3                  set whether interrupt enable [0]
 */
 
//---------------------------------------------------
//init
//0x00
00 //A <- RAM 7B

//0x01
7B

//0x02
02 // A -> seg_7_X(D0)

//0x03
D0

//0x04
00 //A <- RAM 7C

//0x05
7C

//0x06
02 //A -> seg_7_Y(D1)

//0x07
D1

//0x08
00 //A <- 0

//0x09
70

//0x0A
08 //return IDLE
//end
//---------------------------------------------------

//0x0B
00

//0x0C
00

//0x0D
00

//0x0E
00

//0x0F
00

//---------------------------------------------------
//position checking and IR start
//0x10
00 //A <- MouseX(7B)

//0x11
7B

//0x12
0E //B <- Imm 106(0x6A)

//0x13
6A

//0x14
A5 // B <- A > B (X>106?)

//0x15
03 //B -> RAM(0x63)

//0x16
63

//0x17
0E //B <- Imm 52(0x34)

//0x18
34

//0x19
B5 // B <- A < B (X<53?)

//0x1A
03 //B -> RAM(0x62)

//0x1B
62

//0x1C
00 //A <- MouseY(7C)

//0x1D
7C

//0x1E
0E //B <- Imm 80(50)

//0x1F
50

//0x20
A5 //B <- A > B (Y>80?)

//0x21
03 //B -> RAM(0x61)

//0x22
61

//0x23
0E //B <- Imm 40(28)

//0x24
28

//0x25
B5 //B <- A < B (Y<40?)

//0x26
03 //B -> RAM(0x60)

//0x27
60

//0x28
00 //A <- ForwardDetect(0x60)

//0x29
60

//0x2A
34 //A <- A<<

//0x2B
01 //B <- BackDetect(0x61)

//0x2C
61

//0x2D
04 //A <- A+B

//0x2E
01 //B <- LeftDetect(0x62)

//0x2F
62

//0x30
34 //A <- A<<

//0x31
04 //A <- A+B

//0x32
01 //B <- RightDetect(0x63)

//0x33
63

//0x34
34 //A <- A<<

//0x35
04 //A <- A+B

//0x36
02 // A -> IR(0x90)

//0x37
90

//0x38
0D //A <- Imm 0

//0x39
00

//0x3A
0E //B <- Imm 0 

//0x3B
00

//0x3C
07 //Back to timer goto 56

//0x3D
56
//IR end
//---------------------------------------------------

//0x3E
00

//0x3F
00

//0x40
00

//0x41
00

//0x42
00

//0x43
00

//0x44
00

//0x45
00

//0x46
00

//0x47
00

//0x48
00

//0x49
00

//0x4A
00

//0x4B
00

//0x4C
00

//0x4D
00

//0x4E
00

//0x4F
00

//---------------------------------------------------
//start of timer interruption
//0x50
00 //A <- 'd0

//0x51
70

//0x52
01 //B <- 0

//0x53
70

//0x54
07 //goto IR part (0x10)

//0x55
10

//0x56
08 //back to IDLE
//END
//---------------------------------------------------

//0x57
00

//0x58
00

//0x59
00

//0x5A
00

//0x5B
00

//0x5C
00

//0x5D
00

//0x5E
00

//0x5F
00

//0x60
00

//0x61
00

//0x62
00

//0x63
00

//0x64
00

//0x65
00

//0x66
00

//0x67
00

//0x68
00

//0x69
00

//0x6A
00

//0x6B
00

//0x6C
00

//0x6D
00

//0x6E
00

//0x6F
00

//---------------------------------------------------
//VGA START
//0x70
00  //read pre_mouse_X to A

//0x71
7D

//0x72
01  //read pre_mouse_Y to B

//0x73
7E

//0x74
02  //write A to 0xB0

//0x75
B0

//0x76
03  //write B to 0xB1

//0x77
B1

//0x78
0D  //A <- 02 (imme)    recover pixel

//0x79
02

//0x7A
02  //A -> 0xB4

//0x7B
B4

//0x7C
00  //read mouse_X to A

//0x7D
7B

//0x7E
01  //read mouse_Y to B

//0x7F
7C

//0x80
02  //write A to 0xB0

//0x81
B0

//0x82
03  //write B to 0xB1

//0x83
B1

//0x84
0D  //A <- 11 (imme)    write pixel

//0x85
11

//0x86
02  //A -> 0xB4

//0x87
B4

//0x88
08  //IDLE
//END
//---------------------------------------------------

//0x89
00

//0x8A
00

//0x8B
00

//0x8C
00

//0x8D
00

//0x8E
00

//0x8F
00

//0x90
00      

//0x91
00 

//0x92
00

//0x93
00

//---------------------------------------------------
//SET COLOUR
//0x94
00

//0x95
6F

//0x96
02

//0x97
B2      

//start mouse interruption
//backup previous mouse coordinate
//0x98
00      

//0x99
7B

//0x9A
02

//0x9B
7D

//0x9C
00

//0x9D
7C

//0x9E
02

//0x9F
7E

//read current mouse coordinate
//0xA0
00 //A <- mouse_X(A0)

//0xA1
A0

//0xA2
02 // A -> seg_7_X(D0)

//0xA3
D0

//0xA4
02 //A -> RAM 7B

//0xA5
7B

//0xA6
00 //A <- mouse_Y(A1)

//0xA7
A1

//0xA8
02 //A -> seg_7_Y(D1)

//0xA9
D1

//0xAA
02 //A -> RAM 7C

//0xAB
7C

//0xAC
07 //goto VGA

//0xAD
70
//END
//---------------------------------------------------
//start function limiting range
//compare if A with in range [B,0]
//0xAE
0E // B <- Imm 4

//0xAF
04

//0xB0
B6 //if A < B, goto return (BC)

//0xB1
BC

//0xB2
96 //if A = B, goto B9

//0xB3
B9

//0xB4
85 //A > B, let B <- B-1

//0xB5
0D //A <- Imm 0

//0xB6
00

//0xB7
04 //A <- A + B

//0xB8
07 //goto return (BC)

//0xB9
BC

//0xBA
0D //A <- Imm 0

//0xBB
00

//0xBC
07 //return

//0xBD
E2
//END
//---------------------------------------------------

//0xBE
00

//0xBF
00

//---------------------------------------------------
//start button interruption
//0xC0
00 // A <- button_state(RAM A5)
//0xC1
A5

//0xC2
0E // B <- Imm 03

//0xC3
03

//0xC4
B6 //if A < B? if yes, goto D4

//0xC5
D4

//0xC6
00 //if not, A <- button_state(RAM A5)

//0xC7
A5

//0xC8
02 //A -> mouse_sensity(RAM A3)

//0xC9
A3

//0xCA
00 // A <- mouse_sensity(RAM A4)

//0xCB
A4

//0xCC
02 // A -> 7-segmentY(RAM D1)

//0xCD
D1

//0xCE
00 // A <- 0

//0xCF
70

//0xD0
02 // A -> 7-segmentX(RAM D0)

//0xD1
D0

//0xD2
07 //goto E2

//0xD3
E2

//0xD4
0E //start car select, B <- Imm 02

//0xD5
02

//0xD6
96 //if A = B, goto DD

//0xD7
DD

//0xD8
00 //A = 1, start down, A <- car counter(0x08)

//0xD9
08

//0xDA
74 // A <- A-1

//0xDB
07 //goto function (AE)

//0xDC
AE

//0xDD
00 //A = 2, start up, A <- car counter(0x08)

//0xDE
08

//0xDF
54 // A <- A+1

//0xE0
07 //goto function (AE)

//0xE1
AE

//0xE2
02 //A -> car counter(0x08)

//0xE3
08

//0xE4
02 //A -> IRColor (0x91)

//0xE5
91

//0xE6
0E //B <- imme 0x10

//0xE7
10

//0xE8
04 //A <- A + B

//0xE9
0B //Dereference A

//0xEA
02 //A -> VGA colour[0xB2]

//0xEB
B2

//0xEC
0D //init, A <- Imm 0

//0xED
00

//0xEE
0E //B <- Imm 0

//0xEF
00

//0xF0
08 //back IDLE
//end
//---------------------------------------------------

//0xF1
00

//0xF2
00

//0xF3
00

//0xF4
00

//0xF5
00

//0xF6
00

//0xF7
00

//0xF8
00

//0xF9
00

//0xFA
00

//0xFB
00

//0xFC
00

//0xFD
//button interruption
C0

//0xFE
//timer interuption
50

//0xFF
//mouse interruption
94